#version 460 core

// Inputs
layout(local_size_x = 1, local_size_y = 1, local_size_z = 1) in;
layout(binding = 0, offset = 0) uniform atomic_uint errorCounter;
layout (binding = 0, r32f) uniform image2D heightMap;

// Uniforms for the line segment and threshold
uniform vec3 p1;               // First endpoint of the line segment in 3D (x, y, z)
uniform vec3 p2;               // Second endpoint of the line segment in 3D (x, y, z)
uniform float radius;          // Distance threshold (radius of the cylinder)
uniform int resolution;
uniform int flatMill;
uniform float millHeight;

vec3 projectToSegment(vec3 v, vec3 a, vec3 b)
{
    vec3 ab = b - a;
    vec3 av = v - a;

    float t = dot(av, ab) / dot(ab, ab);  // Projection factor
    t = clamp(t, 0.0f, 1.0f);
    return a + t * ab;  // Closest point on the line
}

float sphereY(vec2 xz, vec3 center)
{ 
    float xFactor = xz.x - center.x;
    float zFactor = xz.y - center.z;
    return center.y - sqrt(radius * radius - xFactor * xFactor - zFactor * zFactor);
}

void main() {
    // Get the index of the current point
    ivec2 texCoords = ivec2(gl_GlobalInvocationID.xy);

    vec3 adjustedP1 = p1 + vec3(0, radius, 0);
    vec3 adjustedP2 = p2 + vec3(0, radius, 0);

    // Extract the xz coordinates and load the current y height from heightMap
    vec2 xz = vec2(15.0 * (float(texCoords.x) / resolution - 0.5), 15.0 * (float(texCoords.y) / resolution - 0.5));
    
    float currentHeight = 5.0 * imageLoad(heightMap, texCoords).r;

    // Create the 3D point based on current height
    vec3 point3D = vec3(xz.x, currentHeight, xz.y);

    // Project the point onto the line segment in the xz plane
    vec3 closestPointOnSegment = flatMill != 0 ?
        projectToSegment(point3D, p1, p2) :
        projectToSegment(point3D, adjustedP1, adjustedP2);

    if (flatMill == 0 && point3D.y < closestPointOnSegment.y) // Use the sphere path rule
    {
        // Compute the distance from point3D to the segment's closest point in the xz plane
        float dist = length(point3D - closestPointOnSegment);

        // Check if the point is within the threshold distance (i.e., inside the cylinder)
        if (dist <= radius)
        {
            // The path is locally a sphere
            float newHeight = sphereY(xz, closestPointOnSegment);

            // Update the height map if the intersectionY is lower than the current height
            if (newHeight < currentHeight)
                imageStore(heightMap, texCoords, vec4(0.2 * newHeight, 0.0, 0.0, 0.0));
        }
    }
    else // Use the height rule
    {
        if (flatMill == 0 && point3D.y < closestPointOnSegment.y)
            return; 

        float dist = length(xz - closestPointOnSegment.xz);
        if (dist <= radius && point3D.y <= closestPointOnSegment.y + millHeight)
        {
            float newHeight = flatMill != 0 ?
                closestPointOnSegment.y :
                sphereY(xz, closestPointOnSegment);

            // Update the height map if the intersectionY is lower than the current height
            if (newHeight < currentHeight)
                imageStore(heightMap, texCoords, vec4(0.2 * newHeight, 0.0, 0.0, 0.0));
        }
        else if (dist <= radius && point3D.y > closestPointOnSegment.y + millHeight) // handle error - trying to mill with the non-milling part
            atomicCounterIncrement(errorCounter);
    }   
}